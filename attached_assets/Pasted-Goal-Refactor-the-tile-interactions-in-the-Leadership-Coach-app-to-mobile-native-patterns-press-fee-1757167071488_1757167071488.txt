Goal
Refactor the tile interactions in the Leadership Coach app to mobile-native patterns: press feedback, accessible focus, persistent selected, and disabled states. Remove the solid orange “hover” tile. Reserve saturated orange for primary CTAs.

Tech
TypeScript + React + Tailwind. Assume Create React App/Vite style setup.

1) Design rules to implement

States per tile: default, pressed, selected, disabled, focus-visible.

Mobile first: implement :active press feedback; :hover is optional and subtle.

Selected state uses a light brand tint background plus a 2px brand ring. Do not use full orange fills for the whole tile.

Text remains dark for readability: titles text-slate-900, body text-slate-600.

Focus visible for keyboard/switch users: focus-visible:ring-2 focus-visible:ring-offset-2.

Target size ≥ 44×44 px; spacing ≥ 8 px; animation 120–180 ms in, 90–120 ms out.

Primary CTAs use full orange fill; tiles never do.

2) Tailwind tokens (extend or map to built-in orange)

Update tailwind.config.[jt]s:

// tailwind.config.ts
import type { Config } from "tailwindcss";

export default {
  content: ["./index.html","./src/**/*.{ts,tsx,js,jsx}"],
  theme: {
    extend: {
      colors: {
        brand: {
          // map to Tailwind orange for consistency; swap with exact brand if needed
          50: "#FFF7ED", 100: "#FFEDD5", 200: "#FED7AA",
          300: "#FDBA74", 400: "#FB923C", 500: "#F97316",
          600: "#EA580C", 700: "#C2410C", 800: "#9A3412", 900: "#7C2D12"
        }
      },
      transitionDuration: { fast: "100ms", normal: "150ms" }
    }
  },
  plugins: []
} satisfies Config;


Global CSS helpers:

/* src/index.css or globals.css */
:root {
  --press-scale: .98;
}

3) New reusable component

Create src/components/TileButton.tsx:

import { clsx } from "clsx";
import { useState } from "react";

type Props = {
  title: string;
  subtitle?: string;
  icon?: React.ReactNode;
  selected?: boolean;
  disabled?: boolean;
  onClick?: () => void;
  className?: string;
};

export function TileButton({
  title, subtitle, icon, selected = false, disabled = false, onClick, className
}: Props) {
  const [pressing, setPressing] = useState(false);

  return (
    <button
      type="button"
      aria-pressed={selected}
      disabled={disabled}
      onClick={onClick}
      onPointerDown={() => setPressing(true)}
      onPointerUp={() => setPressing(false)}
      onPointerCancel={() => setPressing(false)}
      className={clsx(
        "group w-full text-left rounded-2xl p-5 outline-none transition-all duration-normal",
        "ring-1 ring-slate-200 shadow-sm",
        "focus-visible:ring-2 focus-visible:ring-brand-500 focus-visible:ring-offset-2",
        !disabled && "hover:ring-slate-300 hover:shadow-md",
        !disabled && "active:opacity-90",
        pressing && "scale-[var(--press-scale)]",
        selected ? "bg-brand-50 ring-2 ring-brand-500" : "bg-white",
        disabled && "opacity-60 cursor-not-allowed",
        className
      )}
    >
      <div className="flex items-start gap-3">
        {icon && (
          <div className={clsx(
            "rounded-xl p-2",
            selected ? "bg-brand-100 text-brand-700" : "bg-blue-50 text-blue-600"
          )}>
            {icon}
          </div>
        )}
        <div className="flex-1">
          <div className="text-lg font-semibold text-slate-900">{title}</div>
          {subtitle && <div className="mt-1 text-slate-600">{subtitle}</div>}
        </div>
        {selected && (
          <span className="ml-auto mt-1 inline-flex items-center rounded-full bg-brand-100 px-2 py-0.5 text-xs font-medium text-brand-700">
            Selected
          </span>
        )}
      </div>
    </button>
  );
}


Optional web haptic on supported devices (safe no-op elsewhere). Add in onClick caller:

if (navigator.vibrate) navigator.vibrate(6);

4) Replace the orange “hover” tile usage

In the screen rendering the grid (e.g. src/pages/Home.tsx), swap the old tile markup for TileButton and track selection in state.

import { useState } from "react";
import { TileButton } from "../components/TileButton";
import { User, Activity, Target, PieChart, Heart, Grid as GridIcon } from "lucide-react";

export default function Home() {
  const [selected, setSelected] = useState<string | null>("growth-profile");

  const tiles = [
    { id: "growth-profile", title: "Growth Profile", subtitle: "Assess strengths & areas", icon: <User /> },
    { id: "red-green", title: "Red & Green Zones", subtitle: "Identify key behaviors", icon: <Activity /> },
    { id: "one-big", title: "One Big Practice", subtitle: "Focus on biggest impact", icon: <Target /> },
    { id: "report-360", title: "360 Feedback Report", subtitle: "Interpret feedback data", icon: <PieChart /> },
    { id: "values", title: "Growth Values", subtitle: "Align actions & values", icon: <Heart /> },
    { id: "matrix", title: "Growth Matrix", subtitle: "Integrate development", icon: <GridIcon /> }
  ];

  return (
    <main className="mx-auto max-w-3xl p-4 sm:p-6">
      <section className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        {tiles.map(t => (
          <TileButton
            key={t.id}
            title={t.title}
            subtitle={t.subtitle}
            icon={t.icon}
            selected={selected === t.id}
            onClick={() => {
              setSelected(t.id);
              if (navigator.vibrate) navigator.vibrate(6);
              // navigate here if direct-nav is desired
              // navigate(`/feature/${t.id}`);
            }}
          />
        ))}
      </section>

      {/* Primary CTA appears when a selection exists */}
      <div className="mt-6">
        <button
          className="w-full sm:w-auto rounded-xl bg-brand-600 px-5 py-3 font-semibold text-white shadow hover:bg-brand-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-500 focus-visible:ring-offset-2 disabled:opacity-60"
          disabled={!selected}
          // onClick={() => navigate(`/feature/${selected}`)}
        >
          Continue
        </button>
      </div>
    </main>
  );
}

5) Remove legacy solid-orange tile

Search and delete any CSS like bg-orange-500 applied to entire tiles in their default/hover states. Keep orange only for:

selected ring/background tints (brand-50, ring-brand-500)

icons/badges in selected state

primary CTA buttons

6) Optional desktop hover

For desktop only, add a subtle hover to non-selected tiles:

<div class="hover:ring-slate-300 hover:shadow-md motion-safe:transition-all"></div>


Never change text colour on hover; never use full orange fill.

7) QA checklist (must pass)

Each tile’s default vs selected contrast meets WCAG: text ≥ 4.5:1 against background.

Press feedback is visible within 150 ms; no bouncy scale beyond 0.98.

Keyboard tab shows a clear focus ring; Enter/Space triggers onClick.

On mobile, touch targets are ≥ 44×44 px; spacing ≥ 8 px.

Only primary CTA uses saturated orange fill.

Screen reader reads aria-pressed correctly for selected tiles.

8) Dev notes

If clsx isn’t installed: npm i clsx.

If icons aren’t present: npm i lucide-react.

Rebuild Tailwind after config changes.

End of spec. Make the code changes, update imports, and remove any old orange “hover” tile styles.

Next 3 actions

Paste the spec into Replit’s assistant and run it; commit the changes as “Tile interactions refactor.”

Manually verify the QA checklist on iOS Safari and Android Chrome.

Do a 5-user hallway test: ask them which tile is selected, then watch for hesitation.

Risks & mitigations

Contrast fails on brand swaps. Mitigation: keep text dark, only tint backgrounds; run a contrast checker.

Inconsistent state handling across screens. Mitigation: use the single TileButton everywhere; forbid custom one-off tiles.

Overuse of orange creeping back. Mitigation: document colour roles in the README and lint for bg-brand-600 outside CTA components.